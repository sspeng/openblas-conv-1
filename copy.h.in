#if GEMM_UNROLL_type == 2

static void copy_operation_type(int m, int n, struct fgemmargs *args, int x, int y, FLOAT *b)
{
	int i, i1, j, im;

	for(j = 0; j + 1 < n; j += 2)
	{
		for(i = 0; i < m; i += 2)
		{
			im = m - i > 2 ? 2 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*2 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*2 + 1] = get_type(args, x+i+i1, y+j+1);
			}
			b += im * 2;
		}
	}
	if(j < n)
	{
		for(i = 0; i < m; i += 2)
		{
			im = m - i > 2 ? 2 : m - i;
			for(i1 = 0; i1 < im; i1++)
				b[i1] = get_type(args, x+i+i1, y+j);
			b += im;
		}
	}
}

#elif GEMM_UNROLL_type == 4

static void copy_operation_type(int m, int n, struct fgemmargs *args, int x, int y, FLOAT *b)
{
	int i, i1, j, im;

	for(j = 0; j + 3 < n; j += 4)
	{
		for(i = 0; i < m; i += 4)
		{
			im = m - i > 4 ? 4 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*4 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*4 + 1] = get_type(args, x+i+i1, y+j+1);
				b[i1*4 + 2] = get_type(args, x+i+i1, y+j+2);
				b[i1*4 + 3] = get_type(args, x+i+i1, y+j+3);
			}
			b += im * 4;
		}
	}
	if(j + 1 < n)
	{
		for(i = 0; i < m; i += 4)
		{
			im = m - i > 4 ? 4 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*2 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*2 + 1] = get_type(args, x+i+i1, y+j+1);
			}
			b += im * 2;
		}
		j += 2;
	}
	if(j < n)
	{
		for(i = 0; i < m; i += 4)
		{
			im = m - i > 4 ? 4 : m - i;
			for(i1 = 0; i1 < im; i1++)
				b[i1] = get_type(args, x+i+i1, y+j);
			b += im;
		}
	}
}

#elif GEMM_UNROLL_type == 8

static void copy_operation_type(int m, int n, struct fgemmargs *args, int x, int y, FLOAT *b)
{
	int i, i1, j, im;

	for(j = 0; j + 7 < n; j += 8)
	{
		for(i = 0; i < m; i += 8)
		{
			im = m - i > 8 ? 8 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*8 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*8 + 1] = get_type(args, x+i+i1, y+j+1);
				b[i1*8 + 2] = get_type(args, x+i+i1, y+j+2);
				b[i1*8 + 3] = get_type(args, x+i+i1, y+j+3);
				b[i1*8 + 4] = get_type(args, x+i+i1, y+j+4);
				b[i1*8 + 5] = get_type(args, x+i+i1, y+j+5);
				b[i1*8 + 6] = get_type(args, x+i+i1, y+j+6);
				b[i1*8 + 7] = get_type(args, x+i+i1, y+j+7);
			}
			b += im * 8;
		}
	}
	if(j + 3 < n)
	{
		for(i = 0; i < m; i += 8)
		{
			im = m - i > 8 ? 8 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*4 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*4 + 1] = get_type(args, x+i+i1, y+j+1);
				b[i1*4 + 2] = get_type(args, x+i+i1, y+j+2);
				b[i1*4 + 3] = get_type(args, x+i+i1, y+j+3);
			}
			b += im * 4;
		}
		j += 4;
	}
	if(j + 1 < n)
	{
		for(i = 0; i < m; i += 8)
		{
			im = m - i > 8 ? 8 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*2 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*2 + 1] = get_type(args, x+i+i1, y+j+1);
			}
			b += im * 2;
		}
		j += 2;
	}
	if(j < n)
	{
		for(i = 0; i < m; i += 8)
		{
			im = m - i > 8 ? 8 : m - i;
			for(i1 = 0; i1 < im; i1++)
				b[i1] = get_type(args, x+i+i1, y+j);
			b += im;
		}
	}
}

#elif GEMM_UNROLL_type == 16

static void copy_operation_type(int m, int n, struct fgemmargs *args, int x, int y, FLOAT *b)
{
	int i, i1, j, im;

	for(j = 0; j + 15 < n; j += 16)
	{
		for(i = 0; i < m; i += 16)
		{
			im = m - i > 16 ? 16 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*16 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*16 + 1] = get_type(args, x+i+i1, y+j+1);
				b[i1*16 + 2] = get_type(args, x+i+i1, y+j+2);
				b[i1*16 + 3] = get_type(args, x+i+i1, y+j+3);
				b[i1*16 + 4] = get_type(args, x+i+i1, y+j+4);
				b[i1*16 + 5] = get_type(args, x+i+i1, y+j+5);
				b[i1*16 + 6] = get_type(args, x+i+i1, y+j+6);
				b[i1*16 + 7] = get_type(args, x+i+i1, y+j+7);
				b[i1*16 + 8] = get_type(args, x+i+i1, y+j+8);
				b[i1*16 + 9] = get_type(args, x+i+i1, y+j+9);
				b[i1*16 + 10] = get_type(args, x+i+i1, y+j+10);
				b[i1*16 + 11] = get_type(args, x+i+i1, y+j+11);
				b[i1*16 + 12] = get_type(args, x+i+i1, y+j+12);
				b[i1*16 + 13] = get_type(args, x+i+i1, y+j+13);
				b[i1*16 + 14] = get_type(args, x+i+i1, y+j+14);
				b[i1*16 + 15] = get_type(args, x+i+i1, y+j+15);
			}
			b += im * 16;
		}
	}
	if(j + 7 < n)
	{
		for(i = 0; i < m; i += 16)
		{
			im = m - i > 16 ? 16 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*8 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*8 + 1] = get_type(args, x+i+i1, y+j+1);
				b[i1*8 + 2] = get_type(args, x+i+i1, y+j+2);
				b[i1*8 + 3] = get_type(args, x+i+i1, y+j+3);
				b[i1*8 + 4] = get_type(args, x+i+i1, y+j+4);
				b[i1*8 + 5] = get_type(args, x+i+i1, y+j+5);
				b[i1*8 + 6] = get_type(args, x+i+i1, y+j+6);
				b[i1*8 + 7] = get_type(args, x+i+i1, y+j+7);
			}
			b += im * 8;
		}
		j += 8;
	}
	if(j + 3 < n)
	{
		for(i = 0; i < m; i += 16)
		{
			im = m - i > 16 ? 16 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*4 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*4 + 1] = get_type(args, x+i+i1, y+j+1);
				b[i1*4 + 2] = get_type(args, x+i+i1, y+j+2);
				b[i1*4 + 3] = get_type(args, x+i+i1, y+j+3);
			}
			b += im * 4;
		}
		j += 4;
	}
	if(j + 1 < n)
	{
		for(i = 0; i < m; i += 16)
		{
			im = m - i > 16 ? 16 : m - i;
			for(i1 = 0; i1 < im; i1++)
			{
				b[i1*2 + 0] = get_type(args, x+i+i1, y+j);
				b[i1*2 + 1] = get_type(args, x+i+i1, y+j+1);
			}
			b += im * 2;
		}
		j += 2;
	}
	if(j < n)
	{
		for(i = 0; i < m; i += 16)
		{
			im = m - i > 16 ? 16 : m - i;
			for(i1 = 0; i1 < im; i1++)
				b[i1] = get_type(args, x+i+i1, y+j);
			b += im;
		}
	}
}

#else

#error Unsupported GEMM_UNROLL_type value, only 2, 4, 8 and 16 implemented

#endif
